name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality & Testing
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:8.0-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: ⚡ Install UV
      run: pip install uv

    - name: 📦 Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: 🔧 Install dependencies
      run: |
        uv sync --dev
        source .venv/bin/activate
        echo "PATH=$PATH" >> $GITHUB_ENV

    - name: 🔍 Run linting with flake8
      run: |
        source .venv/bin/activate
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🎨 Check code formatting with Black
      run: |
        source .venv/bin/activate
        black --check --diff .

    - name: 📦 Check import sorting with isort
      run: |
        source .venv/bin/activate
        isort --check-only --diff .

    - name: 🔒 Run security checks with bandit
      run: |
        source .venv/bin/activate
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --skip B101,B601

    - name: 🧪 Run Django tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-github-actions
        DEBUG: 'True'
        ALLOWED_HOSTS: localhost,127.0.0.1
        CORS_ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
      run: |
        source .venv/bin/activate
        python manage.py collectstatic --noinput
        python manage.py migrate
        python manage.py test --verbosity=2

    - name: 📊 Generate coverage report
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-github-actions
        DEBUG: 'True'
        ALLOWED_HOSTS: localhost,127.0.0.1
        CORS_ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
      run: |
        source .venv/bin/activate
        coverage run --source='.' manage.py test
        coverage xml

    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 2: Docker Build & Push
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'

    permissions:
      contents: read
      packages: write

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-

    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job 3: Security Scanning
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'

    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Deploy to Staging (on develop branch)
  deploy-staging:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.yourdomain.com

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment script here
        # Example: SSH into staging server and pull latest image
        # ssh user@staging-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop && docker-compose up -d"

  # Job 5: Deploy to Production (on release)
  deploy-production:
    needs: [test, build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    environment:
      name: production
      url: https://yourdomain.com

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment script here
        # Example: SSH into production server and pull latest image
        # ssh user@production-server "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest && docker-compose up -d"

  # Job 6: Notify on Success/Failure
  notify:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 📢 Notify on success
      if: needs.test.result == 'success' && needs.build-and-push.result == 'success'
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        # Add notification logic here (Slack, Discord, etc.)

    - name: 📢 Notify on failure
      if: needs.test.result == 'failure' || needs.build-and-push.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline failed!"
        # Add notification logic here (Slack, Discord, etc.)
